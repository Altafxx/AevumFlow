user www-data;
worker_processes auto;
worker_rlimit_nofile 8192;
pid /run/nginx.pid;

# Load dynamic modules
load_module modules/ngx_http_lua_module.so;

events {
    worker_connections 4096;
}

http {
    lua_package_path '/usr/local/openresty/luajit/share/lua/5.1/?.lua;;';
    lua_package_cpath '/usr/local/openresty/luajit/lib/lua/5.1/?.so;;';

    # HTTPS redirect handling
    map $http_x_forwarded_proto $redirect_to_https {
        default 0;
        http   1;
    }

    server {
        listen 80;
        # vod mode
        vod_mode mapped;

        # vod caches
        vod_metadata_cache metadata_cache 512m;
        vod_response_cache response_cache 128m;
        vod_mapping_cache mapping_cache 5m;
        
        # vod paths
        client_max_body_size 10G;

        # gzip manifests
        gzip on;
        gzip_types application/vnd.apple.mpegurl;

        # file handle caching
        open_file_cache          max=1000 inactive=5m;
        open_file_cache_valid    2m;
        open_file_cache_min_uses 1;
        open_file_cache_errors   on;
        aio on;

        # HTTPS redirect handling using location block
        location / {
            set $do_redirect 0;
            
            access_by_lua_block {
                if os.getenv("LOCALHOST") ~= "true" and ngx.var.http_x_forwarded_proto == "http" then
                    ngx.var.do_redirect = 1
                end
            }

            if ($do_redirect = 1) {
                return 301 https://$host$request_uri;
            }

            proxy_pass http://app:3000;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
        }

        location ^~ /video/ {
            alias /etc/nginx/json/;
            vod hls;    

            # Modified headers for HTTPS
            add_header Access-Control-Allow-Headers '*';
            add_header Access-Control-Expose-Headers 'Server,range,Content-Length,Content-Range';
            add_header Access-Control-Allow-Methods 'GET, HEAD, OPTIONS';
            add_header Access-Control-Allow-Origin '*';
            
            # Force HTTPS for HLS content
            absolute_redirect off;

            # CSP headers handling
            access_by_lua_block {
                if os.getenv("LOCALHOST") ~= "true" and ngx.var.http_x_forwarded_proto == "https" then
                    ngx.header["Content-Security-Policy"] = "block-all-mixed-content"
                end
            }

            expires 100d;
        }
    }
}
